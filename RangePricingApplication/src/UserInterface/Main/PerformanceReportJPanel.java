/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Main;

import UserInterface.Main.WorkSpaceProfiles.OrderManagement.*;
import UserInterface.ProductManagement.*;
import TheBusiness.Business.Business;
import TheBusiness.CustomerManagement.CustomerProfile;
import TheBusiness.OrderManagement.Order;
import TheBusiness.OrderManagement.OrderItem;
import TheBusiness.ProductManagement.Product;
import TheBusiness.ProductManagement.ProductCatalog;
import TheBusiness.ProductManagement.ProductSummary;
import TheBusiness.SalesManagement.SalesPersonProfile;
import TheBusiness.Supplier.Supplier;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import java.util.Scanner;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import javax.swing.JOptionPane;


/**
 *
 * @author kal bugrara
 */
public class PerformanceReportJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageSuppliersJPanel
     */
    JPanel CardSequencePanel;
    Business business;
    Supplier selectedsupplier;
    Product selectedproduct;
    SalesPersonProfile orders;

    
    public PerformanceReportJPanel(Business bz, JPanel jp) {
        CardSequencePanel = jp;
        this.business = bz;
        initComponents();
        runReport();
 
    }

 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pdfBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        Q1Lbl = new javax.swing.JLabel();
        Q1Lbl1 = new javax.swing.JLabel();
        Q1Lbl2 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        salesperformance4 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        salesperson5 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        salesperformance5 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        salesperson6 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        salesperformance6 = new javax.swing.JTextField();
        Q1Lbl3 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        salesperson4 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        marketaboveorbelowTxtArea = new javax.swing.JTextArea();
        Q1Lbl4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        priceoptimizationTxtArea = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        top3bestcustomerslbl = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        negotiatedsolutiontxtarea = new javax.swing.JTextArea();
        Back1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 153, 153));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pdfBtn.setText("Generate PDF Report");
        pdfBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pdfBtnActionPerformed(evt);
            }
        });
        add(pdfBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 10, -1, -1));

        jLabel2.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jLabel2.setText("Performance Report");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 550, -1));

        jScrollPane1.setBackground(new java.awt.Color(0, 153, 153));

        jLayeredPane1.setBackground(new java.awt.Color(0, 153, 153));

        Q1Lbl.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        Q1Lbl.setText("TOP 3 BEST CUSTOMERS:");
        jLayeredPane1.add(Q1Lbl);
        Q1Lbl.setBounds(10, 360, 510, 30);

        Q1Lbl1.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        Q1Lbl1.setText("PRICE OPTIMIZATION:");
        jLayeredPane1.add(Q1Lbl1);
        Q1Lbl1.setBounds(630, 540, 450, 30);

        Q1Lbl2.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        Q1Lbl2.setText("TOP 3 BEST NEGOTIATED SOLUTIONS:");
        jLayeredPane1.add(Q1Lbl2);
        Q1Lbl2.setBounds(10, 10, 450, 30);

        jLabel9.setText("Sales Performance: (Sold higher than target) : ");
        jLayeredPane1.add(jLabel9);
        jLabel9.setBounds(630, 70, 260, 30);
        jLayeredPane1.add(salesperformance4);
        salesperformance4.setBounds(890, 70, 180, 30);

        jLabel10.setText("Salesperson: ");
        jLayeredPane1.add(jLabel10);
        jLabel10.setBounds(630, 110, 90, 30);
        jLayeredPane1.add(salesperson5);
        salesperson5.setBounds(700, 110, 180, 30);

        jLabel11.setText("Sales Performance: (Sold higher than target) : ");
        jLayeredPane1.add(jLabel11);
        jLabel11.setBounds(630, 140, 260, 30);
        jLayeredPane1.add(salesperformance5);
        salesperformance5.setBounds(890, 140, 180, 30);

        jLabel12.setText("Salesperson: ");
        jLayeredPane1.add(jLabel12);
        jLabel12.setBounds(630, 180, 90, 30);
        jLayeredPane1.add(salesperson6);
        salesperson6.setBounds(700, 180, 180, 30);

        jLabel13.setText("Sales Performance: (Sold higher than target) : ");
        jLayeredPane1.add(jLabel13);
        jLabel13.setBounds(630, 210, 260, 30);
        jLayeredPane1.add(salesperformance6);
        salesperformance6.setBounds(890, 210, 180, 30);

        Q1Lbl3.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        Q1Lbl3.setText("TOP 3 BEST SALES PERSONS:");
        jLayeredPane1.add(Q1Lbl3);
        Q1Lbl3.setBounds(630, 10, 450, 30);

        jLabel14.setText("Salesperson: ");
        jLayeredPane1.add(jLabel14);
        jLabel14.setBounds(630, 40, 90, 30);
        jLayeredPane1.add(salesperson4);
        salesperson4.setBounds(700, 40, 180, 30);

        marketaboveorbelowTxtArea.setColumns(20);
        marketaboveorbelowTxtArea.setRows(5);
        jScrollPane2.setViewportView(marketaboveorbelowTxtArea);

        jLayeredPane1.add(jScrollPane2);
        jScrollPane2.setBounds(630, 300, 440, 230);

        Q1Lbl4.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        Q1Lbl4.setText("MARKET THAT IS ABOVE OR BELOW EXPECTED TARGET:");
        jLayeredPane1.add(Q1Lbl4);
        Q1Lbl4.setBounds(630, 270, 450, 30);

        priceoptimizationTxtArea.setColumns(20);
        priceoptimizationTxtArea.setRows(5);
        jScrollPane3.setViewportView(priceoptimizationTxtArea);

        jLayeredPane1.add(jScrollPane3);
        jScrollPane3.setBounds(630, 570, 440, 220);

        top3bestcustomerslbl.setColumns(20);
        top3bestcustomerslbl.setRows(5);
        jScrollPane4.setViewportView(top3bestcustomerslbl);

        jLayeredPane1.add(jScrollPane4);
        jScrollPane4.setBounds(10, 390, 510, 230);

        negotiatedsolutiontxtarea.setColumns(20);
        negotiatedsolutiontxtarea.setRows(5);
        jScrollPane5.setViewportView(negotiatedsolutiontxtarea);

        jLayeredPane1.add(jScrollPane5);
        jScrollPane5.setBounds(10, 40, 510, 290);

        jScrollPane1.setViewportView(jLayeredPane1);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 1160, 1680));

        Back1.setText("<< Back");
        Back1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Back1ActionPerformed(evt);
            }
        });
        add(Back1, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 10, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void pdfBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pdfBtnActionPerformed
        // TODO add your handling code here:
        Document document = new Document();
    try {
        PdfWriter.getInstance(document, new FileOutputStream("PerformanceReport.pdf"));
        document.open();
        
        document.add(new Paragraph("Performance Report\n\n"));
        
        document.add(new Paragraph("TOP 3 BEST NEGOTIATED SOLUTIONS:\n" + negotiatedsolutiontxtarea.getText() + "\n\n"));
        document.add(new Paragraph("MARKET THAT IS ABOVE OR BELOW EXPECTED TARGET:\n" + marketaboveorbelowTxtArea.getText() + "\n\n"));
        document.add(new Paragraph("PRICE OPTIMIZATION:\n" + priceoptimizationTxtArea.getText() + "\n\n"));
        document.add(new Paragraph("TOP 3 BEST CUSTOMERS:\n" + top3bestcustomerslbl.getText() + "\n\n"));

        // Add more content as needed
        
        document.close(); // Make sure to close the document

        // Show a popup message
        JOptionPane.showMessageDialog(null, "PDF has been generated successfully!", "PDF Generated", JOptionPane.INFORMATION_MESSAGE);

    } catch (DocumentException | FileNotFoundException e) {
        e.printStackTrace();
        // Show an error message
        JOptionPane.showMessageDialog(null, "Error during PDF creation: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }

    }//GEN-LAST:event_pdfBtnActionPerformed

    private void Back1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Back1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Back1ActionPerformed

    

    
    private void runReport() {
    // Redirect output to a ByteArrayOutputStream
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    PrintStream ps = new PrintStream(baos);

    // Save the old System.out
    final PrintStream oldOut = System.out;

    // Tell Java to use your special stream
    System.setOut(ps);
    
    // Capture the full output from PricingMainFrame
    String fullOutputFromPricingMainFrame = captureOutput(() -> new PricingMainFrame());

    // Extract the "QUESTION 1" part from the full output
    String question1Output = extractQuestionSection1(fullOutputFromPricingMainFrame, "QUESTION 1", "QUESTION 2");
    negotiatedsolutiontxtarea.setText(question1Output);
    
    // Call the method that would get the top salespeople
    ArrayList<SalesPersonProfile> topSalespeople = business.getSalesPersonDirectory().getTopSalesPeople(3);
    /*
    // Set the salespeople and their performance into the text fields
    if (topSalespeople.size() > 0) {
        marketsegmenttxt.setText(topSalespeople.get(0).getPerson().getPersonId());
        producttxt.setText(String.valueOf(topSalespeople.get(0).getSalesPerformance()));
    }
    if (topSalespeople.size() > 1) {
        salesperson2.setText(topSalespeople.get(1).getPerson().getPersonId());
        negotiatedpricetxt.setText(String.valueOf(topSalespeople.get(1).getSalesPerformance()));
    }
    if (topSalespeople.size() > 2) {
        salesperson3.setText(topSalespeople.get(2).getPerson().getPersonId());
        salesperformance3.setText(String.valueOf(topSalespeople.get(2).getSalesPerformance()));
    }
    */
    
    /*
    // Call the method that would get the top customers and their associated data
    ArrayList<CustomerProfile> topCustomers = business.findTopCustomersAboveTarget();

    // Set the customer details and their performance into the text fields
    if (topCustomers.size() > 0) {
        CustomerProfile customer1 = topCustomers.get(0);
        customeridtxt.setText(customer1.getPerson().getPersonId());
        totalrevenuetxt.setText(String.valueOf(customer1.getOrders().stream().mapToInt(Order::getOrderTotal).sum()));
        orderpriceperformancetxt.setText(String.valueOf(customer1.getOrders().stream().mapToInt(Order::getOrderPricePerformance).sum()));
        itemsabovetargettxt.setText(String.valueOf(customer1.getOrders().stream().mapToInt(Order::getNumberOfOrderItemsAboveTarget).sum()));
    }
    if (topCustomers.size() > 1) {
        CustomerProfile customer2 = topCustomers.get(1);
        customeridtxt1.setText(customer2.getPerson().getPersonId());
        totalrevenuetxt1.setText(String.valueOf(customer2.getOrders().stream().mapToInt(Order::getOrderTotal).sum()));
        orderpriceperformancetxt1.setText(String.valueOf(customer2.getOrders().stream().mapToInt(Order::getOrderPricePerformance).sum()));
        itemsabovetargettxt1.setText(String.valueOf(customer2.getOrders().stream().mapToInt(Order::getNumberOfOrderItemsAboveTarget).sum()));
    }
    if (topCustomers.size() > 2) {
        CustomerProfile customer3 = topCustomers.get(2);
        customeridtxt2.setText(customer3.getPerson().getPersonId());
        totalrevenuetxt2.setText(String.valueOf(customer3.getOrders().stream().mapToInt(Order::getOrderTotal).sum()));
        orderpriceperformancetxt2.setText(String.valueOf(customer3.getOrders().stream().mapToInt(Order::getOrderPricePerformance).sum()));
        itemsabovetargettxt2.setText(String.valueOf(customer3.getOrders().stream().mapToInt(Order::getNumberOfOrderItemsAboveTarget).sum()));
    }

    */
    
    // Set the salespeople and their performance into the text fields
    if (topSalespeople.size() > 0) {
        //targetrevenueassumedtxt.setText(topSalespeople.get(0).getPerson().getPersonId());
        salesperson4.setText(topSalespeople.get(0).getPerson().getPersonId());
        salesperformance4.setText(String.valueOf(topSalespeople.get(0).getSalesPerformance()));
    }
    if (topSalespeople.size() > 1) {
        salesperson5.setText(topSalespeople.get(1).getPerson().getPersonId());
        salesperformance5.setText(String.valueOf(topSalespeople.get(1).getSalesPerformance()));
    }
    if (topSalespeople.size() > 2) {
        salesperson6.setText(topSalespeople.get(2).getPerson().getPersonId());
        salesperformance6.setText(String.valueOf(topSalespeople.get(2).getSalesPerformance()));
    }
    
        String fullOutput = captureOutput(() -> new PricingMainFrame().calculateMarginalRevenueByMarket());

    // Now parse the fullOutput to extract the desired part
    String desiredOutput = extractDesiredPart(fullOutput);
    marketaboveorbelowTxtArea.setText(desiredOutput);
    
    // Capture the output for "QUESTION 5"
    String fullOutputForPriceOptimization = captureOutput(() -> new PricingMainFrame().optimizePriceRanges());

    // Extract the "QUESTION 5" part from the full output
    String priceOptimizationOutput = extractQuestionSection(fullOutputForPriceOptimization, "QUESTION 5");
    priceoptimizationTxtArea.setText(priceOptimizationOutput);
    
    
    // Capture the output for "QUESTION 2"
    String fullOutputForTopCustomers = captureOutput(() -> new PricingMainFrame().displayquestion2());

    // Extract the "QUESTION 2" part from the full output
    String topCustomersOutput = extractQuestionSection(fullOutputForTopCustomers, "QUESTION 2", "QUESTION 3");
    top3bestcustomerslbl.setText(topCustomersOutput);
    
    // Put things back
    System.out.flush();
    System.setOut(oldOut);

}
    
    private String extractQuestionSection1(String fullOutput, String startQuestion, String endQuestion) {
    Scanner scanner = new Scanner(fullOutput);
    StringBuilder builder = new StringBuilder();
    boolean capture = false;
    while (scanner.hasNextLine()) {
        String line = scanner.nextLine();
        // Start capturing after the line that contains startQuestion
        if (line.contains(startQuestion)) {
            capture = true;
            // Skip the "TOP 3 BEST NEGOTIATED SOLUTIONS:" line itself if you do not want it included
            line = scanner.nextLine(); // Move to the next line to skip the title
        }
        // Stop capturing after the line that contains endQuestion
        if (line.contains(endQuestion)) {
            break;
        }
        if (capture && !line.trim().equals("TOP 3 BEST NEGOTIATED SOLUTIONS:")) {
            builder.append(line).append(System.lineSeparator());
        }
    }
    scanner.close();
    return builder.toString().trim(); // Remove the last newline character
}

    
    
    private String extractDesiredPart(String fullOutput) {
    // Assuming that the section you want starts with "Salesperson: " and ends with "-------------------"
    // This is a fragile assumption and depends on the output format not changing.
    
    StringBuilder builder = new StringBuilder();
    Scanner scanner = new Scanner(fullOutput);
    
    boolean capture = false;
    while (scanner.hasNextLine()) {
        String line = scanner.nextLine();
        
        // Check if the line is the start of the desired output
        if (line.startsWith("Target Revenue Assumed = ")) {
            capture = true;
        }
        
        // Check if the line is the end of the desired output
        if (line.contains("QUESTION 5")) {
            capture = false;
        }
        
        // Capture the desired lines
        if (capture) {
            builder.append(line).append(System.lineSeparator());
        }
    }
    scanner.close();
    
    return builder.toString();
}

    private String captureOutput(Runnable method) {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        PrintStream ps = new PrintStream(baos);
        PrintStream oldOut = System.out;

        System.setOut(ps);
        method.run();
        System.out.flush();
        System.setOut(oldOut);

        return baos.toString();
    }

     private String extractQuestionSection(String fullOutput, String startQuestion) {
    Scanner scanner = new Scanner(fullOutput);
    StringBuilder builder = new StringBuilder();
    boolean capture = false;
    while (scanner.hasNextLine()) {
        String line = scanner.nextLine();
        // Check for the start of QUESTION 5 and begin capturing
        if (line.contains(startQuestion)) {
            capture = true;
            // Skip the "QUESTION 5" line itself if you do not want it included
            continue;
        }
        // Capture everything after "QUESTION 5" until the end
        if (capture) {
            builder.append(line).append(System.lineSeparator());
        }
    }
    scanner.close();
    return builder.toString().trim(); // Remove the last newline character
}
     
    private String extractQuestionSection(String fullOutput, String startQuestion, String endQuestion) {
    Scanner scanner = new Scanner(fullOutput);
    StringBuilder builder = new StringBuilder();
    boolean capture = false;
    while (scanner.hasNextLine()) {
        String line = scanner.nextLine();
        // Start capturing after the line that contains startQuestion
        if (line.contains(startQuestion)) {
            capture = true;
            // Skip the "TOP 3 BEST CUSTOMERS:" line itself if you do not want it included
            continue;
        }
        // Stop capturing after the line that contains endQuestion
        if (line.contains(endQuestion)) {
            break;
        }
        // Skip adding the "TOP 3 BEST CUSTOMERS:" line to the builder
        if (capture && !line.trim().equals("TOP 3 BEST CUSTOMERS:")) {
            builder.append(line).append(System.lineSeparator());
        }
    }
    scanner.close();
    return builder.toString().trim(); // Remove the last newline character
}





    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Back1;
    private javax.swing.JLabel Q1Lbl;
    private javax.swing.JLabel Q1Lbl1;
    private javax.swing.JLabel Q1Lbl2;
    private javax.swing.JLabel Q1Lbl3;
    private javax.swing.JLabel Q1Lbl4;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea marketaboveorbelowTxtArea;
    private javax.swing.JTextArea negotiatedsolutiontxtarea;
    private javax.swing.JButton pdfBtn;
    private javax.swing.JTextArea priceoptimizationTxtArea;
    private javax.swing.JTextField salesperformance4;
    private javax.swing.JTextField salesperformance5;
    private javax.swing.JTextField salesperformance6;
    private javax.swing.JTextField salesperson4;
    private javax.swing.JTextField salesperson5;
    private javax.swing.JTextField salesperson6;
    private javax.swing.JTextArea top3bestcustomerslbl;
    // End of variables declaration//GEN-END:variables
    
    
}
